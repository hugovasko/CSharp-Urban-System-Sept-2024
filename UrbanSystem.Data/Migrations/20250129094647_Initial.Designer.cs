// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UrbanSystem.Data;

#nullable disable

namespace UrbanSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129094647_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserMeeting", b =>
                {
                    b.Property<Guid>("AttendeesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeetingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttendeesId", "MeetingsId");

                    b.HasIndex("MeetingsId");

                    b.ToTable("ApplicationUserMeeting");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.ApplicationUserSuggestion", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuggestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "SuggestionId");

                    b.HasIndex("SuggestionId");

                    b.ToTable("UsersSuggestions");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("SuggestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CityPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a159b8e7-9ef9-48e6-a86e-1aac425396b8"),
                            CityName = "Blagoevgrad",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/%D0%91%D0%BB%D0%B0%D0%B3%D0%BE%D0%B5%D0%B2%D0%B3%D1%80%D0%B0%D0%B4_-_panoramio_%2826%29.jpg/1024px-%D0%91%D0%BB%D0%B0%D0%B3%D0%BE%D0%B5%D0%B2%D0%B3%D1%80%D0%B0%D0%B4_-_panoramio_%2826%29.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("92990c40-8f97-4401-a1d2-35264c19fcbc"),
                            CityName = "Burgas",
                            CityPicture = "https://dynamic-media-cdn.tripadvisor.com/media/photo-o/08/19/fe/30/getlstd-property-photo.jpg?w=1200&h=-1&s=1",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("8a60615e-b2b6-4f47-aab6-74f4fc7f7e26"),
                            CityName = "Dobrich",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/Dobrich_Sunrise%2C_Winter_2014.JPG/1280px-Dobrich_Sunrise%2C_Winter_2014.JPG",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("01f89299-4f21-4a06-a8a6-e829326a6718"),
                            CityName = "Gabrovo",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/TownHall_Gabrovo.jpg/1280px-TownHall_Gabrovo.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("8cefcae6-8e8e-42c3-a655-71649d44b11e"),
                            CityName = "Haskovo",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Haskovo2.jpg/1024px-Haskovo2.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("cb9c1865-8796-496b-bbdc-dc61015db2fe"),
                            CityName = "Kardzhali",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/5/5d/%D0%98%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%8F%D1%82_%D0%BC%D1%83%D0%B7%D0%B5%D0%B9_%D0%B2_%D0%9A%D1%8A%D1%80%D0%B4%D0%B6%D0%B0%D0%BB%D0%B8.JPG",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("bd2d55b3-1a6c-4da8-bc51-f3e9dbcb2433"),
                            CityName = "Kyustendil",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Kyustendil_25.jpg/1024px-Kyustendil_25.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("6f2b6eb1-4ee5-40ad-b3ec-9ca03a8abb09"),
                            CityName = "Lovech",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Bulgaria-Lovech-03.jpg/1024px-Bulgaria-Lovech-03.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("41b5c307-ee80-4ab5-a787-214bce369164"),
                            CityName = "Montana",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/4/47/Montana-downtown.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("a3169fb0-e5fa-4dd1-aa0a-f634fc3e17a9"),
                            CityName = "Pazardzhik",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Pazardzhik_City_Centre.jpg/1024px-Pazardzhik_City_Centre.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("f8b36c43-a102-43fb-850d-e84b1989ef06"),
                            CityName = "Pernik",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Pernik-culture-palace-left.jpg/1920px-Pernik-culture-palace-left.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("a59f638d-6ec8-4b02-bb9d-8050276c43e0"),
                            CityName = "Pleven",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/%D0%9F%D0%BB%D0%B5%D0%B2%D0%B5%D0%BD_%D0%BC%D0%B0%D1%80%D1%82_2014_-_panoramio_%281%29.jpg/1280px-%D0%9F%D0%BB%D0%B5%D0%B2%D0%B5%D0%BD_%D0%BC%D0%B0%D1%80%D1%82_2014_-_panoramio_%281%29.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("6812848f-85a8-40b9-ba3f-66085fd17191"),
                            CityName = "Plovdiv",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Bulgaria_Bulgaria-0785_-_Roman_Theatre_of_Philippopolis_%287432772486%29.jpg/1280px-Bulgaria_Bulgaria-0785_-_Roman_Theatre_of_Philippopolis_%287432772486%29.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("b9876917-f0dd-42e7-b1a8-b729c3716808"),
                            CityName = "Razgrad",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/%D0%95%D1%82%D0%BD%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D1%81%D0%BA%D0%B8_%D0%BC%D1%83%D0%B7%D0%B5%D0%B9_%D0%B2_%D0%B3%D1%80%D0%B0%D0%B4_%D0%A0%D0%B0%D0%B7%D0%B3%D1%80%D0%B0%D0%B4.jpg/1280px-%D0%95%D1%82%D0%BD%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D1%81%D0%BA%D0%B8_%D0%BC%D1%83%D0%B7%D0%B5%D0%B9_%D0%B2_%D0%B3%D1%80%D0%B0%D0%B4_%D0%A0%D0%B0%D0%B7%D0%B3%D1%80%D0%B0%D0%B4.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("14b8d2d1-d746-4fa6-b778-bbfc8c37430e"),
                            CityName = "Ruse",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%B0_%D0%B2_%D0%A0%D1%83%D1%81%D0%B5.jpg/1280px-%D0%9E%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%B0_%D0%B2_%D0%A0%D1%83%D1%81%D0%B5.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("b419e73f-062d-4217-8669-da2510ceb893"),
                            CityName = "Shumen",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/5/51/Shumen_chitalishte_Dobri_Voynikov.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("e8edebcb-6dbe-4ee7-8dbd-7d61087fcc7c"),
                            CityName = "Silistra",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Silistra-art-gallery-Minkov.jpg/1024px-Silistra-art-gallery-Minkov.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("c2c5246d-39b5-4354-a564-c7862b7650f0"),
                            CityName = "Sliven",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Municipality_of_Sliven_Photo.jpg/1280px-Municipality_of_Sliven_Photo.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("56945d78-5deb-4ac0-8ede-e59460354ead"),
                            CityName = "Smolyan",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/%D0%A1%D0%BC%D0%BE%D0%BB%D1%8F%D0%BD_2691396959_f63b323fab_o.jpg/1024px-%D0%A1%D0%BC%D0%BE%D0%BB%D1%8F%D0%BD_2691396959_f63b323fab_o.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("bec5f66f-a235-45d0-8509-8e8f186800e0"),
                            CityName = "Sofia",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c0/Catedral_de_Alejandro_Nevski_--_2019_--_Sof%C3%ADa%2C_Bulgaria.jpg/1280px-Catedral_de_Alejandro_Nevski_--_2019_--_Sof%C3%ADa%2C_Bulgaria.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("984d8c52-8fe7-4d90-8229-16e1a3b0a124"),
                            CityName = "Stara Zagora",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/3/33/Samarsko_Zname_Panorama.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("9a0bdee7-3f9d-4845-8530-dc9d3a8284d7"),
                            CityName = "Targovishte",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Targovishte-MainSquare.jpg/1280px-Targovishte-MainSquare.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("024995c2-6caa-46c5-bde5-7500e6b277c4"),
                            CityName = "Varna",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/en/thumb/7/79/Dramatheatrevarna.jpg/1280px-Dramatheatrevarna.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("cf42a3eb-a067-4d67-acf2-c9d1139e3ad2"),
                            CityName = "Veliko Tarnovo",
                            CityPicture = "https://traventuria.com/wp-content/uploads/2016/10/veliko-tarnovo-1.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("e45d0803-4449-497b-bfaa-4f49f245156a"),
                            CityName = "Vidin",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/7/70/Theater_House_in_Vidin_%2827460729905%29.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("e541f56c-842d-4423-b863-092cf2ac16dc"),
                            CityName = "Vratsa",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Vratsa_12.jpg/1024px-Vratsa_12.jpg",
                            StreetName = "Main Street"
                        },
                        new
                        {
                            Id = new Guid("85556ca0-85f7-4e4c-a587-1b9487920a00"),
                            CityName = "Yambol",
                            CityPicture = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/YAMBOL_new_center.jpg/1920px-YAMBOL_new_center.jpg",
                            StreetName = "Main Street"
                        });
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Duration")
                        .HasMaxLength(8)
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FundingDeadline")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FundsNeeded")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Suggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f062ca1-b55e-4346-9aa7-832332337f6b"),
                            AttachmentUrl = "https://sofiacheap.com/p/a/v/avtobus-sofia-28-1140x0.jpg.pagespeed.ce._682L6k5Ui.jpg",
                            Category = "Transport",
                            Description = "Implement more frequent bus routes during peak hours to reduce congestion.",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Priority = "High",
                            Status = "Pending",
                            Title = "Improve Public Transport",
                            UploadedOn = new DateTime(2025, 1, 29, 9, 46, 46, 734, DateTimeKind.Utc).AddTicks(7310)
                        },
                        new
                        {
                            Id = new Guid("6d5ba2b5-c732-4111-906b-a8f20751a615"),
                            AttachmentUrl = "https://images.adsttc.com/media/images/65ef/ba05/4ad7/6901/7c36/0da6/slideshow/renovation-of-peace-parks-gate-6-atelier-z-plus_14.jpg?1710209562",
                            Category = "Environment",
                            Description = "Renovate the central park by adding new benches, lighting, and a playground area.",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Priority = "Medium",
                            Status = "Approved",
                            Title = "Park Renovation",
                            UploadedOn = new DateTime(2025, 1, 29, 9, 46, 46, 734, DateTimeKind.Utc).AddTicks(7310)
                        },
                        new
                        {
                            Id = new Guid("3144eeda-97db-4d68-8cc2-e36792166907"),
                            AttachmentUrl = "https://cleanlites.com/wp-content/uploads/2020/01/011420_Cleanlites-Blog-Image_Encourage-Recycling-Community.jpg",
                            Category = "Waste Management",
                            Description = "Introduce a recycling program and provide more public recycling bins.",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Priority = "High",
                            Status = "In Review",
                            Title = "Recycling Initiative",
                            UploadedOn = new DateTime(2025, 1, 29, 9, 46, 46, 734, DateTimeKind.Utc).AddTicks(7320)
                        },
                        new
                        {
                            Id = new Guid("e69b5e9b-cbbd-47da-af68-3ce3fdd3a8f2"),
                            AttachmentUrl = "https://www.silabs.com/content/dam/siliconlabs/images/applications/smart-cities/street-lighting-poster.png",
                            Category = "Infrastructure",
                            Description = "Upgrade street lighting in residential areas to improve safety during nighttime.",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Priority = "Medium",
                            Status = "Pending",
                            Title = "Street Lighting Upgrade",
                            UploadedOn = new DateTime(2025, 1, 29, 9, 46, 46, 734, DateTimeKind.Utc).AddTicks(7330)
                        },
                        new
                        {
                            Id = new Guid("68fffc33-2e9f-4ec2-a7b0-1a0d6c0d0c72"),
                            AttachmentUrl = "https://www-res.cablelabs.com/wp-content/uploads/2016/10/28093617/Community_Wi-Fi_A_Primer_vivek_ganti-1024x576.jpg",
                            Category = "Technology",
                            Description = "Install free Wi-Fi hotspots in key public areas for better community connectivity.",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Priority = "High",
                            Status = "Approved",
                            Title = "Community Wi-Fi Access",
                            UploadedOn = new DateTime(2025, 1, 29, 9, 46, 46, 734, DateTimeKind.Utc).AddTicks(7330)
                        });
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.SuggestionLocation", b =>
                {
                    b.Property<Guid>("SuggestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuggestionId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("SuggestionsLocations");
                });

            modelBuilder.Entity("ApplicationUserMeeting", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanSystem.Data.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.ApplicationUserSuggestion", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", "User")
                        .WithMany("UsersSuggestions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanSystem.Data.Models.Suggestion", "Suggestion")
                        .WithMany("UsersSuggestions")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Comment", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", null)
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("UrbanSystem.Data.Models.Suggestion", "Suggestion")
                        .WithMany("Comments")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Meeting", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", "Organizer")
                        .WithMany("OrganizedMeetings")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Project", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.Location", "Location")
                        .WithMany("Projects")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Suggestion", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.ApplicationUser", null)
                        .WithMany("Suggestions")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.SuggestionLocation", b =>
                {
                    b.HasOne("UrbanSystem.Data.Models.Location", "Location")
                        .WithMany("SuggestionsLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanSystem.Data.Models.Suggestion", "Suggestion")
                        .WithMany("SuggestionsLocations")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Suggestion");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrganizedMeetings");

                    b.Navigation("Suggestions");

                    b.Navigation("UsersSuggestions");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Location", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("SuggestionsLocations");
                });

            modelBuilder.Entity("UrbanSystem.Data.Models.Suggestion", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SuggestionsLocations");

                    b.Navigation("UsersSuggestions");
                });
#pragma warning restore 612, 618
        }
    }
}
